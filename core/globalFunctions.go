package core

import (
	"backgammon/models"
	"crypto/rand"
	"slices"
	"sort"
)

// Global hareket sÄ±rasÄ± sayacÄ±, oyun her baÅŸladÄ±ÄŸÄ±nda sÄ±fÄ±rlanmalÄ±
var globalMoveOrder int64 = 0

// Yeni oyunda globalMoveOrder'i sifirlar.
func ResetMoveOrder() {
	globalMoveOrder = 0
}

// Tavlada baslangic taslarini dizer.
func GetInitialStones() []*LogicalCoordinate {
	var stones []*LogicalCoordinate

	type stackKey struct {
		PointIndex int
		Player     int
	}

	stackCount := make(map[stackKey]int)

	// BaÅŸlangÄ±Ã§ taÅŸlarÄ± iÃ§in aynÄ± MoveOrder veriyoruz, Ã§Ã¼nkÃ¼ baÅŸlangÄ±Ã§ta hareket yok
	const initialMoveOrder = 0

	addStack := func(pointIndex, count, player int) {
		for i := 0; i < count; i++ {
			key := stackKey{PointIndex: pointIndex, Player: player}
			stackIndex := stackCount[key]
			isTop := (i == count-1)

			stones = append(stones, &LogicalCoordinate{
				PointIndex:   pointIndex,
				PositionType: PositionTypeEnum.Point,
				Player:       player,
				StackIndex:   stackIndex,
				IsTop:        isTop,
				MoveOrder:    initialMoveOrder,
			})

			stackCount[key]++
		}
	}

	// Oyuncu 1 taÅŸlarÄ±
	addStack(0, 2, 1)
	addStack(11, 5, 1)
	addStack(16, 3, 1)
	addStack(18, 5, 1)

	// Oyuncu 2 taÅŸlarÄ±
	addStack(23, 2, 2)
	addStack(12, 5, 2)
	addStack(7, 3, 2)
	addStack(5, 5, 2)

	return stones
}

// Tum oyuncu taslarini once Playerlara gore sonra PontIndex ve en son StackIndex'e gore Desc dizer
func SortStonesByPlayerPointAndStackDesc(stones []*LogicalCoordinate) {
	sort.Slice(stones, func(i, j int) bool {
		if stones[i].Player == stones[j].Player {
			if stones[i].PointIndex == stones[j].PointIndex {
				return stones[i].StackIndex > stones[j].StackIndex
			}
			return stones[i].PointIndex < stones[j].PointIndex
		}
		return stones[i].Player < stones[j].Player // Ã–nce Player1 (1), sonra Player2 (2)
	})
}

func SortStonesByPlayerPointAndStackAsc(stones []*LogicalCoordinate) {
	sort.Slice(stones, func(i, j int) bool {
		if stones[i].Player == stones[j].Player {
			if stones[i].PointIndex == stones[j].PointIndex {
				return stones[i].StackIndex < stones[j].StackIndex
			}
			return stones[i].PointIndex < stones[j].PointIndex
		}
		return stones[i].Player < stones[j].Player // Ã–nce Player1 (1), sonra Player2 (2)
	})
}

// TaÅŸÄ± hedef noktaya taÅŸÄ±r ve MoveOrder gÃ¼nceller.
// Sadece taÅŸÄ±n eski ve yeni noktalarÄ±ndaki taÅŸlar gÃ¼ncellenir.

// 1-) Kirik tasi var mi "IsAllBarEntryAllowed()" ve Taslar istenen PointIndex'e hareket edebiliyor mu "IsNormalMoveAllowed()" bakildiktan sonra cagrilir.
// 2-) Taslarin PointIndexlerini gercekten yer degistirerek ayrica ayrildigi ve tasindigi guruplarin Stackindexlerini degistirerek taslari gerckten hareket ettirir.
// 3-) Arada rakibin kirilan tasi var ise kirar..
func MoveTopStoneAndUpdate(stones []*LogicalCoordinate, player int, fromPointIndex int, toPointIndex int) ([]*LogicalCoordinate, bool, []*LogicalCoordinate) {

	var brokenStones []*LogicalCoordinate //Varsa kirilan taslar
	//Normalde IsAllBarEntryAllowed(), IsNormalMoveAllowed() functionlari bu Methodun basinda cagrilip bakilmali. Ama gene de bir ekstra 3 kontrol koyma ihtiyaci duydum.

	// 1. Gecerli oyuncun belirtilen yerde en ustte tasi var mi ?
	if !playerHasTopStoneAt(stones, player, fromPointIndex) {
		return stones, false, brokenStones // Oyuncunun bu noktada Ã¼stte taÅŸÄ± yok, hareket edemez
	}

	// 2. Hedef nokta geÃ§erli mi?
	//if toPointIndex < 0 || toPointIndex >= 24 {
	//Taslar Toplana da bilir..
	if toPointIndex < 0 || toPointIndex > 24 {
		return stones, false, brokenStones
	}

	// toPointIndex 24 deÄŸilse karsi rakibin taslari ile [len(stone)>1] blokaj ve kÄ±rma kontrollerini yap
	if toPointIndex != 24 {
		//Karsi rakibin birden fazla tasi var mi ? ilgili PointIndex'inde..
		// 3. Hedef nokta rakip tarafindan blokaj altinda mi ?
		if !canMoveToPoint(stones, player, toPointIndex) {
			return stones, false, brokenStones // Hareket yasak
		}

		// ğŸ’¥ KÄ±rma kontrolÃ¼ â€” hedef noktada 1 adet rakip taÅŸÄ± varsa kÄ±r ve bar'a gÃ¶nder
		if countOpponentStonesAtPoint(stones, player, toPointIndex) == 1 {
			var brokenPlayer int
			for i, stone := range stones {
				if stone.PointIndex == toPointIndex && stone.Player != player {
					// KÄ±rÄ±lan taÅŸÄ±n oyuncusu
					brokenPlayer = stone.Player

					// ğŸ’¾ KÄ±rÄ±lan taÅŸÄ± brokenStones iÃ§ine ekle
					original := *stones[i] // struct deÄŸer kopyasÄ±
					brokenStones = append(brokenStones, &original)

					stones[i].PointIndex = -1
					stones[i].PositionType = PositionTypeEnum.Bar
					stones[i].StackIndex = 0
					stones[i].IsTop = true

					globalMoveOrder++
					stones[i].MoveOrder = globalMoveOrder

					break
				}
			}
			// Sadece kÄ±rÄ±lan oyuncunun barÄ±ndaki taÅŸlarÄ±n stack bilgisi gÃ¼ncellenir
			stones = updateStacks(stones, []int{-1}, brokenPlayer)
		}
	}
	var moveIndex int = -1
	// fromPointIndex'teki en Ã¼stteki ve player'a ait taÅŸÄ± bul
	for i, stone := range stones {
		if stone.PointIndex == fromPointIndex && stone.IsTop && stone.Player == player {
			moveIndex = i
			break
		}
	}

	if moveIndex == -1 {
		// TaÅŸ bulunamadÄ±, hareket yapÄ±lmadÄ±
		return stones, false, brokenStones
	}

	oldPointIndex := stones[moveIndex].PointIndex
	stones[moveIndex].PointIndex = toPointIndex
	//stones[moveIndex].PositionType = PositionTypeEnum.Point
	if toPointIndex == 24 {
		stones[moveIndex].PositionType = PositionTypeEnum.OffBoard
	} else {
		stones[moveIndex].PositionType = PositionTypeEnum.Point
	}

	globalMoveOrder++
	stones[moveIndex].MoveOrder = globalMoveOrder

	// StackIndex GÃ¼ncellemelerini yap
	/*stones = updateStacks(stones, []int{oldPointIndex, toPointIndex})*/
	// StackIndex GÃ¼ncellemelerini yap
	if fromPointIndex == -1 {
		// Oyuncu bar'dan Ã§Ä±ktÄ±ysa, hem kendi bar'Ä± hem de hedefi gÃ¼nceller. Player bazli
		stones = updateStacks(stones, []int{-1, toPointIndex}, player)
	} else {
		stones = updateStacks(stones, []int{oldPointIndex, toPointIndex})
	}

	return stones, true, brokenStones
}

// Oynayacak Player'in belirtilen from noktasindaki taÅŸ dilimlerinde en Ã¼stte taÅŸa sahip olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
func playerHasTopStoneAt(stones []*LogicalCoordinate, player int, pointIndex int) bool {
	if pointIndex == 24 {
		return false // offboard'daki taÅŸlar zaten Ã¼stte olamaz, oynanamaz
	}

	for _, stone := range stones {
		if stone.Player == player && stone.PointIndex == pointIndex && stone.IsTop {
			return true
		}
	}
	return false
}

// Tasin oynayacagi PointIndex bos mu, ya da rakibin sadece 1 pulu mu var ?
func canMoveToPoint(stones []*LogicalCoordinate, player int, toPointIndex int) bool {
	// 24 = OffBoard (toplama alanÄ±), buralara doÄŸrudan gidilebilir
	if toPointIndex == 24 {
		return true
	}

	//Tasin oynanacagi yerde rakip tas var mi ve en fazla 1 tane mi ?
	opponentCount := countOpponentStonesAtPoint(stones, player, toPointIndex)

	// EÄŸer rakip taÅŸ sayÄ±sÄ± 0 veya 1 ise hareket mÃ¼mkÃ¼n
	// 2 veya daha fazla rakip taÅŸ varsa hareket yasak
	return opponentCount <= 1
}

// Rakip oyuncunun belirtilen noktada (PointIndex) kac tasi var onu hesaplar..
func countOpponentStonesAtPoint(stones []*LogicalCoordinate, player int, pointIndex int) int {
	if pointIndex == 24 {
		return 0 // ToplanmÄ±ÅŸ taÅŸlar oyun dÄ±ÅŸÄ±nda
	}

	count := 0
	for _, stone := range stones {
		if stone.PointIndex == pointIndex && stone.Player != player {
			count++
		}
	}
	return count
}

// Barâ€™da Kirik taÅŸÄ± olan oyuncu baÅŸka hamle yapamaz!
func PlayerMustEnterFromBar(stones []*LogicalCoordinate, player int) bool {
	for _, stone := range stones {
		if stone.Player == player && stone.PositionType == PositionTypeEnum.Bar {
			return true
		}
	}
	return false
}

// Kirik tasi girebilecek mi? Girerse hangi zar veya zarlar ile girebilecek.
/*func CanEnterFromBar(stones []*LogicalCoordinate, player int, dice []int) (bool, []int) {
	var enterableDice []int
	for _, die := range dice {
		entryPoint := GetEntryPoint(player, die)
		if entryPoint < 0 || entryPoint > 23 {
			continue
		}
		if canMoveToPoint(stones, player, entryPoint) {
			enterableDice = append(enterableDice, die)
		}
	}
	return len(enterableDice) > 0, enterableDice
}*/

// Kirik butun taslari girebilecek mi? Girerse hangi zar veya zarlar ile girilebilecek. Double(Cift) zar destegi icin ExpandDice() function kullan..
// Her bir kÄ±rÄ±k taÅŸ iÃ§in zar bulabilir miyim?
func CanAllBarStonesEnter(stones []*LogicalCoordinate, player int, dice []int) (bool, []int) {
	var usedDice []int
	remainingDice := append([]int(nil), dice...) // ZarlarÄ± kopyala
	barStonesCount := 0

	// Bar'daki kendi kirik taÅŸlarÄ±nÄ± say
	for _, stone := range stones {
		if stone.Player == player && stone.PositionType == PositionTypeEnum.Bar {
			barStonesCount++
		}
	}

	if barStonesCount == 0 {
		return true, []int{} // Zaten kirik bar taÅŸÄ± yok
	}

	// Her bar taÅŸÄ± iÃ§in bir zar bulmaya Ã§alÄ±ÅŸ
	for i := 0; i < barStonesCount; i++ {
		found := false
		for j, die := range remainingDice {
			entryPoint := GetEntryPoint(player, die)
			if canMoveToPoint(stones, player, entryPoint) {
				usedDice = append(usedDice, die) //Ise yarar zar, kirik bir tas icin kullanilir.
				// Bu zarÄ± kullan, listeden Ã§Ä±kar
				remainingDice = append(remainingDice[:j], remainingDice[j+1:]...)
				found = true
				break
			}
		}
		if !found {
			return false, usedDice // Bu taÅŸ iÃ§in zar yok, iÅŸlem baÅŸarÄ±sÄ±z
		}
	}

	return true, usedDice // Her taÅŸ iÃ§in zar bulundu
}

// Kirik taslari girebilecegin TUM zarlari geri doner.
func GetEnterableBarDice(stones []*LogicalCoordinate, player int, dice []int) (enterableDice []int) {
	for _, die := range dice {
		entryPoint := GetEntryPoint(player, die)
		if canMoveToPoint(stones, player, entryPoint) {
			enterableDice = append(enterableDice, die)
		}
	}
	return
}

// Player'a gore atilan zarin, tavlada PontIndex karsiligi bulunur.
// PointIndex 0'dan baslar zarlarin PointIndex karsiligi (-1) 1 eksigidir.
func GetEntryPoint(player int, die int) int {
	if player == 1 {
		return die - 1 // 1 â†’ 0, 6 â†’ 5 => 0..5 (kendi baÅŸlangÄ±Ã§)
	} else if player == 2 {
		return 24 - die // 1 â†’ 23, 6 â†’ 18 => 18..23 (kendi baÅŸlangÄ±Ã§)
	}
	return -1
}

// Ã–nce bar giriÅŸi kontrol edilir. Kirik tas var mi ?
// Tum kiriklar girilebiliyor mu ve kullanilmayan zarlar hangisi
// Tum kiriklar girilmez ise Allowed ve CanEnterFromBar = false olur..
func IsAllBarEntryAllowed(stones []*LogicalCoordinate, player int, dice []int) models.MoveCheckResult {
	result := models.MoveCheckResult{}

	if PlayerMustEnterFromBar(stones, player) {
		result.FromBar = true
		//canEnter, enterableDice := CanEnterFromBar(stones, player, dice)
		canEnter, enterableDice := CanAllBarStonesEnter(stones, player, dice) // Burada kirigi iceri sokabilen sadece ilk bulunan zarlar her bir kirik icin bulunup butun taslar girilebiliyor mu ve geride kalan kullanilmayan zarlar hangisi diye bakiliyor.

		result.CanEnterFromBar = canEnter
		result.EnterableDice = enterableDice
		result.UsedDice = enterableDice
		result.Allowed = canEnter

		//Kullanilmayan geride kalan zarlar hesaplanir
		if canEnter && len(enterableDice) > 0 {
			result.RemainingDice = calculateRemainingDice(dice, enterableDice)
		} else {
			result.RemainingDice = dice // veya boÅŸ liste []int{}, tercihe gÃ¶re
		}

		return result
	}

	// Barâ€™da taÅŸ yok, izin yok demiyoruz, sadece bar durumu deÄŸil. Yani Kirik tasi yok..
	result.FromBar = false
	//result.Allowed = false
	result.Allowed = true
	result.RemainingDice = dice
	return result
}

// Ã–nce bar giriÅŸi kontrol edilir. Kirik tas var mi ? Varsa kirigi iceri sokabilen tum zarlar ve hicbir kirigi iceri sokamayan zarlar belirlenir.
func IsAnyBarEntryAllowed(stones []*LogicalCoordinate, player int, dice []int) models.MoveCheckResult {
	result := models.MoveCheckResult{}

	if PlayerMustEnterFromBar(stones, player) {
		result.FromBar = true
		enterableDice := GetEnterableBarDice(stones, player, dice) //Kirik veya kiriklari iceri sokabilecek tum zarlar geri donulur. RemaningDice ile hicbir kirigi iceri sokamayan zarlar belli olur.
		canEnter := len(enterableDice) > 0

		result.CanEnterFromBar = canEnter
		result.EnterableDice = enterableDice
		result.UsedDice = enterableDice
		result.Allowed = canEnter

		//Kullanilmayan geride kalan zarlar hesaplanir
		if canEnter && len(enterableDice) > 0 {
			result.RemainingDice = calculateRemainingDice(dice, enterableDice)
		} else {
			result.RemainingDice = dice // veya boÅŸ liste []int{}, tercihe gÃ¶re
		}

		return result
	}

	// Barâ€™da taÅŸ yok, izin yok demiyoruz, sadece bar durumu deÄŸil. Yani Kirik tasi yok..
	result.FromBar = false
	//result.Allowed = false
	result.Allowed = true
	result.RemainingDice = dice
	return result
}

func IsNormalMoveAllowed_Old(stones []*LogicalCoordinate, player int, fromPointIndex int, toPointIndex int, dice []int) models.MoveCheckResult {
	result := models.MoveCheckResult{}

	// Normal hamle kontrolÃ¼
	canMove := canMoveToPoint(stones, player, toPointIndex)
	if canMove {
		result.CanMoveNormally = true
		result.NormalDice = dice // opsiyonel: zar mesafesiyle uyum kontrolÃ¼ yapÄ±labilir
		result.Allowed = true
	} else {
		result.Allowed = false
	}

	result.FromBar = false
	return result
}

// Ã–nce tek zarla hareket deneniyor,
// Sonra zarlarÄ±n iki farklÄ± sÄ±rasÄ±yla adÄ±m adÄ±m kontrol ediliyor,
// EÄŸer biri uygunsa hareket mÃ¼mkÃ¼n kabul ediliyor.
// Cift zar var ise 3lu ve 4lu hareketi kontrol ediliyor.
func IsNormalMoveAllowed(stones []*LogicalCoordinate, player int, fromPointIndex int, toPointIndex int, dice []int) models.MoveCheckResult {
	result := models.MoveCheckResult{}
	usedDie := []int{}

	// Oyuncuya gÃ¶re hareket yÃ¶nÃ¼ belirle
	direction := 1
	if player == 2 {
		direction = -1
	}

	distance := (toPointIndex - fromPointIndex) * direction
	if distance < 0 {
		// Negatif mesafe hareket deÄŸil, izin yok
		result.Allowed = false
		return result
	}

	canMove := false

	// Tek zarla hareket kontrolÃ¼ sadece mesafe 6 veya daha kÃ¼Ã§Ã¼kse yapÄ±lÄ±r
	if distance <= 6 {
		for _, d := range dice {
			if d == distance && canMoveToPoint(stones, player, fromPointIndex+direction*d) {
				canMove = true
				usedDie = []int{d}
				break
			}
		}
	}

	// Ä°ki farklÄ± zarla (normal durum)
	if !canMove && len(dice) == 2 {
		d1, d2 := dice[0], dice[1]

		// Ã–nce d1 sonra d2 ile hareket dene
		posAfterFirst := fromPointIndex + direction*d1
		posAfterSecond := posAfterFirst + direction*d2
		if canMoveToPoint(stones, player, posAfterFirst) && canMoveToPoint(stones, player, posAfterSecond) && posAfterSecond == toPointIndex {
			usedDie = []int{d1, d2}
			canMove = true
		}

		if !canMove {
			// Ã–nce d2 sonra d1 ile hareket dene
			posAfterFirst = fromPointIndex + direction*d2
			posAfterSecond = posAfterFirst + direction*d1
			if canMoveToPoint(stones, player, posAfterFirst) && canMoveToPoint(stones, player, posAfterSecond) && posAfterSecond == toPointIndex {
				usedDie = []int{d1, d2}
				canMove = true
			}
		}
	}

	// *** Double'dan geriye 3 zar kaldÄ±ysa (Ã¶rnek: 1,1,1), 3 zarla hareket kontrolÃ¼ ***
	if !canMove && len(dice) == 3 {
		sum := 0
		canReach := true
		for i := 1; i <= 3; i++ {
			sum += dice[0] // hepsi aynÄ± zar (double)
			intermediate := fromPointIndex + direction*sum

			if i < 3 && !canMoveToPoint(stones, player, intermediate) {
				canReach = false
				break
			}
		}
		if canReach && (fromPointIndex+direction*sum) == toPointIndex && canMoveToPoint(stones, player, toPointIndex) {
			usedDie = []int{dice[0], dice[1], dice[2]} // 3 zar kullanÄ±ldÄ±
			canMove = true
		}
	}

	// *** Double geldiÄŸi zaman 2 zarla hareket kontrolÃ¼ buraya eklendi ***
	if !canMove && len(dice) == 4 {
		// 2 zar kullanarak hedefe varma kontrolÃ¼ (Ã¶rn: ilk 2 zarla)
		sum := 0
		canReach := true
		for i := 1; i <= 2; i++ {
			sum += dice[0] // hepsi aynÄ± zar (double) olduÄŸu iÃ§in dice[0]
			intermediate := fromPointIndex + direction*sum

			if i < 2 && !canMoveToPoint(stones, player, intermediate) { // ara noktalar engelli mi?
				canReach = false
				break
			}
		}
		if canReach && (fromPointIndex+direction*sum) == toPointIndex && canMoveToPoint(stones, player, toPointIndex) {
			usedDie = []int{dice[0], dice[1]} // ilk 2 zar kullanÄ±ldÄ±
			canMove = true
		}
	}

	// *** Double geldiÄŸi zaman 3 zarla hareket kontrolÃ¼ buraya eklendi ***
	if !canMove && len(dice) == 4 {
		// 3 zar kullanarak hedefe varma kontrolÃ¼ (Ã¶rn: ilk 3 zarla)
		sum := 0
		canReach := true
		for i := 1; i <= 3; i++ {
			sum += dice[0] // hepsi aynÄ± zar (double) olduÄŸu iÃ§in dice[0]
			intermediate := fromPointIndex + direction*sum

			if i < 3 && !canMoveToPoint(stones, player, intermediate) { // ara noktalar engelli mi?
				canReach = false
				break
			}
		}
		if canReach && (fromPointIndex+direction*sum) == toPointIndex && canMoveToPoint(stones, player, toPointIndex) {
			usedDie = []int{dice[0], dice[1], dice[2]} // ilk 3 zar kullanÄ±ldÄ±
			canMove = true
		}
	}

	// Double zar durumunda 4 adÄ±mda hedefe ulaÅŸabiliyor muyuz?
	if !canMove && len(dice) == 4 {
		sum := 0
		for i := 1; i <= 4; i++ {
			sum += dice[0] // Hepsi aynÄ± olduÄŸundan dice[0] yeterlidir
			intermediate := fromPointIndex + direction*sum

			// Ara noktalarda rakip taÅŸlar varsa hareket geÃ§ersiz
			if i < 4 && !canMoveToPoint(stones, player, intermediate) {
				break
			}

			// DÃ¶rdÃ¼ncÃ¼ adÄ±mda hedefe ulaÅŸÄ±lmÄ±ÅŸ ve taÅŸ konulabilir mi?
			if i == 4 && intermediate == toPointIndex && canMoveToPoint(stones, player, toPointIndex) {
				usedDie = []int{dice[0], dice[1], dice[2], dice[3]} // ya da 4x dice[0]
				canMove = true
			}
		}
	}

	//Kullanilip geride kalan kullanilmamis zarlar burada tanimlanir.
	if canMove && len(usedDie) > 0 {
		result.RemainingDice = calculateRemainingDice(dice, usedDie)
		result.UsedDice = usedDie
	} else {
		result.RemainingDice = dice
	}

	result.FromBar = false
	result.CanMoveNormally = canMove
	result.NormalDice = dice
	result.Allowed = canMove

	return result
}

/*func MoveStoneAndUpdate(stones []*LogicalCoordinate, index int, newPointIndex int, player int) ([]*LogicalCoordinate, bool) {

	// TaÅŸÄ±n belirtilen oyuncuya ait olup olmadÄ±ÄŸÄ±nÄ± kontrol et
	if stones[index].Player != player {
		return stones, false
	}

	// TaÅŸÄ±n yÄ±ÄŸÄ±nÄ±n en Ã¼stÃ¼nde olup olmadÄ±ÄŸÄ±nÄ± kontrol et
	if !stones[index].IsTop {
		return stones, false
	}

	oldPointIndex := stones[index].PointIndex

	stones[index].PointIndex = newPointIndex
	stones[index].PositionType = PositionTypeEnum.Point

	globalMoveOrder++
	stones[index].MoveOrder = globalMoveOrder

	return UpdateStacks(stones, []int{oldPointIndex, newPointIndex}), true
}*/

// Sadece verilen noktalarÄ±n taÅŸlarÄ±nÄ± gÃ¼nceller
func UpdateStacks_Old(stones []*LogicalCoordinate, pointsToUpdate []int) []*LogicalCoordinate {
	pointGroups := make(map[int][]*LogicalCoordinate)
	for _, stone := range stones {
		pointGroups[stone.PointIndex] = append(pointGroups[stone.PointIndex], stone)
	}

	pointsSet := make(map[int]bool)
	for _, p := range pointsToUpdate {
		pointsSet[p] = true
	}

	for pointIndex := range pointsSet {
		group := pointGroups[pointIndex]

		// MoveOrder'a gÃ¶re sÄ±rala: kÃ¼Ã§Ã¼k olan daha erken taÅŸ (altta), bÃ¼yÃ¼k olan Ã¼stte
		sort.Slice(group, func(i, j int) bool {
			return group[i].MoveOrder < group[j].MoveOrder
		})

		for i := range group {
			group[i].StackIndex = i
			group[i].IsTop = (i == len(group)-1)
		}

		pointGroups[pointIndex] = group
	}

	// GÃ¼ncellenmiÅŸ taÅŸlarÄ± dÃ¼z listeye toplar
	var updatedStones []*LogicalCoordinate
	for _, group := range pointGroups {
		updatedStones = append(updatedStones, group...)
	}

	return updatedStones
}

// Sadece verilen noktalarÄ±n taÅŸlarÄ±nÄ± gÃ¼nceller. Hem PointIndex hem de StackIndex guncellenir. Eski yeri ve gittigi yer, her ikisi de guncellenir.
// Tas kiriliyor ise playerFilter gelir. Kirilan tas kimin filter'i. Geri kalan guncellemelerde Player filitresine ihtiyac yok.
func updateStacks(stones []*LogicalCoordinate, pointsToUpdate []int, playerFilter ...int) []*LogicalCoordinate {
	//Barda kimin tasi kirilmis..
	//Bu sadece kirik taslarin guncellenmesinde player bazli filter eklemek icin kullanilir. Diger Pointindexlerde tek player olacagi icin kullanilmaz..
	var filterByPlayer bool
	var player int
	if len(playerFilter) > 0 {
		filterByPlayer = true
		player = playerFilter[0]
	}

	// pointsToUpdate'deki her nokta iÃ§in iÅŸlemi yap
	for _, pointIndex := range pointsToUpdate {
		// 24 (OffBoard) iÃ§in stack gÃ¼ncellemesi yapma
		if pointIndex == 24 {
			continue
		}

		// Ä°lgili noktadaki taÅŸlarÄ± filtrele
		group := []*LogicalCoordinate{}
		for _, stone := range stones {
			if stone.PointIndex == pointIndex {
				//Sadece kendisinin kirik taslarinin StackIndexini guncelleyecek..
				if filterByPlayer && stone.Player != player {
					continue
				}
				group = append(group, stone)
			}
		}

		// MoveOrder'a gÃ¶re sÄ±rala (kÃ¼Ã§Ã¼k olan altta)
		sort.Slice(group, func(i, j int) bool {
			return group[i].MoveOrder < group[j].MoveOrder
		})

		// StackIndex ve IsTop deÄŸerlerini gÃ¼ncelle
		for i := range group {
			group[i].StackIndex = i
			group[i].IsTop = (i == len(group)-1)
		}
	}

	// stones zaten pointer tip olduÄŸu iÃ§in gÃ¼ncellemeler doÄŸrudan yansÄ±dÄ±
	return stones
}

// Zar atma fonksiyonlarÄ±...

func rollDie() (int, error) {
	for {
		b := make([]byte, 1)
		if _, err := rand.Read(b); err != nil {
			return 0, err
		}
		if b[0] < 252 {
			return int(b[0]%6) + 1, nil
		}
	}
}

func RollDice_Old() (int, int, error) {
	d1, err := rollDie()
	if err != nil {
		return 0, 0, err
	}
	d2, err := rollDie()
	if err != nil {
		return 0, 0, err
	}
	return d1, d2, nil
}

func RollDice() ([]int, error) {
	d1, err := rollDie()
	if err != nil {
		return []int{0, 0}, err
	}
	d2, err := rollDie()
	if err != nil {
		return []int{0, 0}, err
	}
	return ExpandDice([]int{d1, d2}), err
}

// Double gelen zarlari 4ler
// originalDice := []int{6, 6}            // double
// expandedDice := ExpandDice(originalDice) // => [6, 6, 6, 6]
func ExpandDice(dice []int) []int {
	if len(dice) == 2 && dice[0] == dice[1] {
		// Double zar atÄ±lmÄ±ÅŸ, 4 kere kullanÄ±lmalÄ±
		return []int{dice[0], dice[0], dice[0], dice[0]}
	}
	// Normal zar
	return dice
}

// Zarlardan ise yararlar kullanildiktan sonra geri kalan zarlar..
// dice = [4,4,4,4], used = [4,4,4] â†’ kalan: [4]
func calculateRemainingDice(dice []int, used []int) []int {
	remaining := make([]int, len(dice))
	copy(remaining, dice)

	for _, usedDie := range used {
		for i, remDie := range remaining {
			if remDie == usedDie {
				// Bu zarÄ± kullandÄ±k, listeden Ã§Ä±kar
				remaining = append(remaining[:i], remaining[i+1:]...)
				break
			}
		}
	}

	return remaining
}

// Oynanabilir zarlara gore belirlenen PointIndex'deki tas ile gidilebilecek PointIndexler yani hamleler hesaplanir.
func GetPossibleMovePoints_old(
	stones []*LogicalCoordinate,
	player int,
	fromPointIndex int,
	remainingDice []int,
) []int {
	direction := 1
	if player == 2 {
		direction = -1
	}

	var possiblePoints []int

	if !playerHasTopStoneAt(stones, player, fromPointIndex) {
		return possiblePoints
	}

	for _, die := range remainingDice {
		toPointIndex := fromPointIndex + direction*die

		if toPointIndex < 0 || toPointIndex >= 24 {
			continue
		}

		if canMoveToPoint(stones, player, toPointIndex) {
			possiblePoints = append(possiblePoints, toPointIndex)
		}
	}

	return possiblePoints
}

// Oynanabilir zarlara gore belirlenen PointIndex'deki tas ile gidilebilecek PointIndexler yani hamleler hesaplanir.
func GetPossibleMovePoints_Old2(
	stones []*LogicalCoordinate,
	player int,
	fromPointIndex int,
	dice []int,
) []int {
	direction := 1
	if player == 2 {
		direction = -1
	}

	resultSet := make(map[int]bool)

	if !playerHasTopStoneAt(stones, player, fromPointIndex) {
		return nil
	}

	// Tek zarla
	for _, d := range dice {
		to := fromPointIndex + direction*d
		if to >= 0 && to < 24 && canMoveToPoint(stones, player, to) {
			resultSet[to] = true
		}
	}

	// Ä°ki farklÄ± zarla (normal zar)
	if len(dice) == 2 {
		d1, d2 := dice[0], dice[1]

		// d1 sonra d2
		intermediate1 := fromPointIndex + direction*d1
		final1 := intermediate1 + direction*d2
		if canMoveToPoint(stones, player, intermediate1) &&
			final1 >= 0 && final1 < 24 &&
			canMoveToPoint(stones, player, final1) {
			resultSet[final1] = true
		}

		// d2 sonra d1
		intermediate2 := fromPointIndex + direction*d2
		final2 := intermediate2 + direction*d1
		if canMoveToPoint(stones, player, intermediate2) &&
			final2 >= 0 && final2 < 24 &&
			canMoveToPoint(stones, player, final2) {
			resultSet[final2] = true
		}
	}

	// Double zar: 3 adÄ±m (d, d, d)
	if len(dice) == 4 {
		d := dice[0]
		sum := 0
		valid := true
		for i := 1; i <= 3; i++ {
			sum += d
			intermediate := fromPointIndex + direction*sum
			if i < 3 && !canMoveToPoint(stones, player, intermediate) {
				valid = false
				break
			}
		}
		final := fromPointIndex + direction*sum
		if valid && final >= 0 && final < 24 && canMoveToPoint(stones, player, final) {
			resultSet[final] = true
		}
	}

	// Double zar: 4 adÄ±m
	if len(dice) == 4 {
		d := dice[0]
		sum := 0
		valid := true
		for i := 1; i <= 4; i++ {
			sum += d
			intermediate := fromPointIndex + direction*sum
			if i < 4 && !canMoveToPoint(stones, player, intermediate) {
				valid = false
				break
			}
		}
		final := fromPointIndex + direction*sum
		if valid && final >= 0 && final < 24 && canMoveToPoint(stones, player, final) {
			resultSet[final] = true
		}
	}

	// Set â†’ slice
	var possiblePoints []int
	for p := range resultSet {
		possiblePoints = append(possiblePoints, p)
	}

	sort.Ints(possiblePoints)
	return possiblePoints
}
func GetPossibleMovePoints_NotSupport24BearOff(
	stones []*LogicalCoordinate,
	player int,
	fromPointIndex int,
	dice []int,
) []int {
	direction := 1
	if player == 2 {
		direction = -1
	}

	resultSet := make(map[int]bool)

	if !playerHasTopStoneAt(stones, player, fromPointIndex) {
		return nil
	}

	// Tek zarla
	for _, d := range dice {
		to := fromPointIndex + direction*d
		if to >= 0 && to < 24 && canMoveToPoint(stones, player, to) {
			resultSet[to] = true
		}
	}

	// Ä°ki farklÄ± zarla (normal zar)
	if len(dice) == 2 {
		d1, d2 := dice[0], dice[1]

		// d1 sonra d2
		intermediate1 := fromPointIndex + direction*d1
		final1 := intermediate1 + direction*d2
		if intermediate1 >= 0 && intermediate1 < 24 && canMoveToPoint(stones, player, intermediate1) &&
			final1 >= 0 && final1 < 24 && canMoveToPoint(stones, player, final1) {
			resultSet[final1] = true
		}

		// d2 sonra d1
		intermediate2 := fromPointIndex + direction*d2
		final2 := intermediate2 + direction*d1
		if intermediate2 >= 0 && intermediate2 < 24 && canMoveToPoint(stones, player, intermediate2) &&
			final2 >= 0 && final2 < 24 && canMoveToPoint(stones, player, final2) {
			resultSet[final2] = true
		}
	}

	// Double zar: 1 ila 4 adÄ±m (d, d, d, d)
	if len(dice) == 4 && dice[0] == dice[1] && dice[1] == dice[2] && dice[2] == dice[3] {
		d := dice[0]
		for steps := 1; steps <= 4; steps++ {
			valid := true
			for i := 1; i < steps; i++ {
				intermediate := fromPointIndex + direction*d*i
				if intermediate < 0 || intermediate >= 24 || !canMoveToPoint(stones, player, intermediate) {
					valid = false
					break
				}
			}
			target := fromPointIndex + direction*d*steps
			if valid && target >= 0 && target < 24 && canMoveToPoint(stones, player, target) {
				resultSet[target] = true
			}
		}
	}

	// Set â†’ slice
	var possiblePoints []int
	for p := range resultSet {
		possiblePoints = append(possiblePoints, p)
	}

	//Siraya dizip oyle versin
	sort.Ints(possiblePoints)
	return possiblePoints
}

// Bir tas secilince PointIndex ,Zar ve Player bilgisi ile gidilebilecek PointIndex noktalari verilir. Bir cesit Bot Helper..
// [24 bear off] tas playera gore toplama alani icinde ise 24 PointIndex sunulur ama tas disardan geliyor ise 24 PointIndex sunulmaz. Disardan dogrudan gelen tasin Bear Off olmasini bu functionda desteklenmiyor.
func GetPossibleMovePoints(
	stones []*LogicalCoordinate,
	player int,
	fromPointIndex int,
	dice []int,
) []int {
	direction := 1
	if player == 2 {
		direction = -1
	}

	resultSet := make(map[int]bool)

	//Kirik Tasi var ve baska tasi oynamak istiyor..Izin verilmez..
	isPlayerMustEnterFromBar := PlayerMustEnterFromBar(stones, player)
	if isPlayerMustEnterFromBar && fromPointIndex != -1 {
		return nil // bar'dan inmediÄŸi sÃ¼rece baÅŸka taÅŸ oynayamaz
	} else if isPlayerMustEnterFromBar && fromPointIndex == -1 { //Kirik tasi sokmasi durumunda girilebilecek PointIndexleri Gosterir..
		barResult := IsAnyBarEntryAllowed(stones, player, dice) //1-) barResult.EnterableDice kullanilabilecek zarlari ifade eder.
		if !barResult.Allowed {
			return nil
		}
		for _, die := range barResult.EnterableDice {
			entryPoint := GetEntryPoint(player, die)
			resultSet[entryPoint] = true
		}

		//Eger kirik tas girilmeye calisiliyor ise diger kosullara bakilmasina gerek yok..
		// Set â†’ slice
		return mapKeysToSortedSlice(resultSet)

		/*	var possiblePoints []int
			for p := range resultSet {
				possiblePoints = append(possiblePoints, p)
			}

			sort.Ints(possiblePoints)
			return possiblePoints*/
	}

	if !playerHasTopStoneAt(stones, player, fromPointIndex) {
		return nil
	}

	/*isBearOffTarget := func(to int) bool {
		return to >= 24
	}*/
	//Tas toplanirken Player yonune gore Player 1 > 24 ve Player 2 < 0 "to" degerine bakilir ama toplanan her tasin PointIndex'i 24 dur!
	isBearOffTarget := func(to int) bool {
		if player == 1 {
			return to >= 24
		} else if player == 2 {
			return to < 0
		}
		return false
	}

	// Tek zarla
	for _, d := range dice {
		to := fromPointIndex + direction*d
		if to >= 0 && to < 24 {
			if canMoveToPoint(stones, player, to) {
				resultSet[to] = true
			}
		} else if isBearOffTarget(to) {
			if allowed, _, _ := CanBearOffStone(stones, player, fromPointIndex, []int{d}); allowed {
				resultSet[24] = true
			}
		}
	}

	// Ä°ki farklÄ± zarla (normal zar)
	if len(dice) == 2 {
		d1, d2 := dice[0], dice[1]

		// d1 sonra d2
		intermediate1 := fromPointIndex + direction*d1
		final1 := intermediate1 + direction*d2
		if intermediate1 >= 0 && intermediate1 < 24 && canMoveToPoint(stones, player, intermediate1) {
			if final1 >= 0 && final1 < 24 && canMoveToPoint(stones, player, final1) {
				resultSet[final1] = true
			} else if isBearOffTarget(final1) {
				if allowed, _, _ := CanBearOffStone(stones, player, fromPointIndex, []int{d1, d2}); allowed {
					resultSet[24] = true
				}
			}
		}

		// d2 sonra d1
		intermediate2 := fromPointIndex + direction*d2
		final2 := intermediate2 + direction*d1
		if intermediate2 >= 0 && intermediate2 < 24 && canMoveToPoint(stones, player, intermediate2) {
			if final2 >= 0 && final2 < 24 && canMoveToPoint(stones, player, final2) {
				resultSet[final2] = true
			} else if isBearOffTarget(final2) {
				if allowed, _, _ := CanBearOffStone(stones, player, fromPointIndex, []int{d2, d1}); allowed {
					resultSet[24] = true
				}
			}
		}
	}

	// Double zar: 3 adÄ±m. 1'i kullanilmis. (d, d, d) 1'den 3 adÄ±ma kadar
	if len(dice) == 3 && dice[0] == dice[1] {
		d := dice[0]
		for steps := 1; steps <= 3; steps++ {
			sum := d * steps
			valid := true
			//1, 2 ve 3 adimlik tum kademeler denenir.
			for i := 1; i < steps; i++ {
				intermediate := fromPointIndex + direction*d*i
				if intermediate < 0 || intermediate >= 24 || !canMoveToPoint(stones, player, intermediate) {
					valid = false
					break
				}
			}
			target := fromPointIndex + direction*sum
			if valid {
				if target >= 0 && target < 24 && canMoveToPoint(stones, player, target) {
					resultSet[target] = true
				} else if isBearOffTarget(target) {
					if allowed, _, _ := CanBearOffStone(stones, player, fromPointIndex, dice[:steps]); allowed {
						resultSet[24] = true
					}
				}
			}
		}
	}

	// Double zar: 4 adÄ±m (d, d, d, d) 1'den 4 adÄ±ma kadar
	if len(dice) == 4 && dice[0] == dice[1] {
		d := dice[0]
		for steps := 1; steps <= 4; steps++ {
			sum := d * steps
			valid := true
			//1, 2, 3 ve 4 adimlik tum kademeler denenir.
			for i := 1; i < steps; i++ {
				intermediate := fromPointIndex + direction*d*i
				if intermediate < 0 || intermediate >= 24 || !canMoveToPoint(stones, player, intermediate) {
					valid = false
					break
				}
			}
			target := fromPointIndex + direction*sum
			if valid {
				if target >= 0 && target < 24 && canMoveToPoint(stones, player, target) {
					resultSet[target] = true
				} else if isBearOffTarget(target) {
					if allowed, _, _ := CanBearOffStone(stones, player, fromPointIndex, dice[:steps]); allowed {
						resultSet[24] = true
					}
				}
			}
		}
	}
	/*if len(dice) == 4 {
		d := dice[0]
		sum := 0
		valid := true
		for i := 1; i <= 4; i++ {
			sum += d
			intermediate := fromPointIndex + direction*sum
			if i < 4 && !canMoveToPoint(stones, player, intermediate) {
				valid = false
				break
			}
		}
		final := fromPointIndex + direction*sum
		if valid {
			if final >= 0 && final < 24 && canMoveToPoint(stones, player, final) {
				resultSet[final] = true
			} else if isBearOffTarget(final) {
				if allowed, _, _ := CanBearOffStone(stones, player, fromPointIndex, []int{d, d, d, d}); allowed {
					resultSet[24] = true
				}
			}
		}
	}*/

	// Set â†’ slice
	return mapKeysToSortedSlice(resultSet)

	/*var possiblePoints []int
	for p := range resultSet {
		possiblePoints = append(possiblePoints, p)
	}

	sort.Ints(possiblePoints)
	return possiblePoints*/
}

func mapKeysToSortedSlice(m map[int]bool) []int {
	var result []int
	for k := range m {
		result = append(result, k)
	}
	sort.Ints(result)
	return result
}

// Oyuncuya gore Tas Toplama PointIndex araliklari belirleniyor.
func getBearoffRangeForPlayer(player int) []int {
	if player == 1 {
		return []int{18, 19, 20, 21, 22, 23}
	}
	return []int{0, 1, 2, 3, 4, 5}
}

// Toplamak icin(Bear_Off) tum taslar olmasi gereken yerde mi ?
func AreAllStonesInBearOffArea(stones []*LogicalCoordinate, player int) bool {
	bearOffRange := getBearoffRangeForPlayer(player)

	pointSet := make(map[int]bool)
	for _, p := range bearOffRange {
		pointSet[p] = true
	}

	for _, s := range stones {
		if s.Player != player {
			continue
		}

		// ToplanmÄ±ÅŸ taÅŸ (PointIndex == 24) her zaman geÃ§erli
		if s.PointIndex == 24 {
			continue
		}

		//Kirik tasi varsa toplama yapilamaz
		if s.PointIndex == -1 {
			return false
		}

		if !pointSet[s.PointIndex] {
			return false
		}
	}
	return true
}

func removeDieAtIndex(dice []int, index int) []int {
	return append(append([]int{}, dice[:index]...), dice[index+1:]...)
}

// Bu Fonksiyonun sonrasinda => "MoveTopStoneAndUpdate(stones, player, fromIndex, 24)" tasi toplamak icin cagrilir...
// [24 bear off] tas playera gore toplama alani icinde olmadan olmuyor. Disardan dogrudan gelen tasin Bear Off olmasini bu function desteklenmiyor.
// Tas Toplamaya Uygun mu, kullanilan zar(usedDice) ve geriye kullanilabilecek zar(remainingDice) da donulur.
func CanBearOffStone(stones []*LogicalCoordinate, player int, pointIndex int, dice []int) (result bool, remainingDice []int, usedDice []int) {
	// 1. TÃ¼m taÅŸlar Player icin toplama alanÄ±nda mÄ±?
	if !AreAllStonesInBearOffArea(stones, player) {
		return false, dice, nil
	}

	//Gerek yok ama gene de koydum..
	// 2. Toplama alanÄ± dÄ±ÅŸÄ±nda bir taÅŸ iÅŸaretlenmiÅŸse izin verilmez
	bearOffRange := getBearoffRangeForPlayer(player)
	if !slices.Contains(bearOffRange, pointIndex) {
		return false, dice, nil
	}

	// 3. Ä°lgili noktada oyuncunun top taÅŸÄ± var mÄ±?
	if !playerHasTopStoneAt(stones, player, pointIndex) {
		return false, dice, nil
	}

	// Mesafe hesabÄ± => Zar karsiligi
	var distance int
	if player == 1 {
		distance = 23 - pointIndex + 1
	} else {
		distance = pointIndex + 1
	}

	// En kÃ¼Ã§Ã¼k geÃ§erli zarÄ± bul
	for i, die := range dice {
		if die == distance {
			// Tam zarla Ã§Ä±kabilir
			remaining := removeDieAtIndex(dice, i)
			return true, remaining, []int{die}
		}
	}

	// Daha bÃ¼yÃ¼k zar var mÄ±? Atilan zardan ornek 4'den daha geride 5-6'da tas var mi diye bakilir..
	for i, die := range dice {
		if die > distance {
			// Daha geride taÅŸ var mÄ± kontrol et varsa o pointIndexdeki tasi alamassin => return false
			for _, s := range stones {
				if s.Player != player || s.PointIndex == 24 || s.PointIndex == pointIndex {
					continue
				}
				if player == 1 && s.PointIndex < pointIndex {
					return false, dice, nil
				}
				if player == 2 && s.PointIndex > pointIndex {
					return false, dice, nil
				}
			}
			remaining := removeDieAtIndex(dice, i)
			return true, remaining, []int{die}
		}
	}

	return false, dice, nil
}

// Kazanan Player'i belirlemek icin kullanilir.
func IsFinishedForPlayer(stones []*LogicalCoordinate, player int) bool {
	for _, s := range stones {
		if s.Player == player && s.PointIndex != 24 {
			return false
		}
	}
	return true
}
func IsFinishedForPlayer_MoreCheck(stones []*LogicalCoordinate, player int) bool {
	count := 0
	for _, s := range stones {
		if s.Player == player {
			if s.PointIndex != 24 {
				return false
			}
			count++
		}
	}
	return count == 15 // Tavlada bir oyuncunun 15 taÅŸÄ± vardÄ±r
}

/*TryMoveStone, bir oyuncunun taÅŸÄ±nÄ± belirtilen noktadan baÅŸka bir noktaya taÅŸÄ±mayÄ± dener.
Bu fonksiyon, verilen zar(lar) ve mevcut taÅŸ durumu Ã¼zerinden geÃ§erli bir hamle olup olmadÄ±ÄŸÄ±nÄ± kontrol eder ve uygular.
Yani once PointIndex'ini degistirir. Sonra gitti yiginda StackIndex'ini degistirip isTop= true yapar ve
sort isleminde en tepede ciksin diye global artan MoveOrder degeri kullanilir.

Parametreler:
  - stones: Oyun tahtasÄ±ndaki mevcut tÃ¼m taÅŸlarÄ±n listesi.
  - player: Hamleyi yapan oyuncunun numarasÄ± (1 veya 2).
  - fromPoint: TaÅŸÄ±n bulunduÄŸu noktanÄ±n indeksidir. -1 ise oyuncunun barâ€™daki (kÄ±rÄ±k) taÅŸÄ±nÄ± iÃ§eri soktuÄŸu anlamÄ±na gelir.
  - toPoint: TaÅŸÄ±n gitmek istediÄŸi hedef noktanÄ±n indeksidir. 24 ise taÅŸ toplanmak (bearing off / Africa) isteniyor demektir.
  - dice: Oyuncunun o turda sahip olduÄŸu kullanÄ±labilir zarlar.

Geri DÃ¶nenler:
  - newStones: TaÅŸlarÄ±n gÃ¼ncellenmiÅŸ hali (hamle baÅŸarÄ±lÄ±ysa).
  - ok: Hamlenin kurallara uygun olup olmadÄ±ÄŸÄ±nÄ± belirten bool deÄŸer.
  - usedDice: Hamlede kullanÄ±lan zar(lar).
  - remainingDice: KullanÄ±lmayan zarlar (hamleden sonra kalÄ±r).
  - brokenStones: EÄŸer rakip taÅŸ kÄ±rÄ±ldÄ±ysa, kÄ±rÄ±lan taÅŸ(lar)Ä±n orijinal (eski) hali.

AÃ§Ä±klama:
  - Barâ€™dan giriÅŸ: EÄŸer fromPoint == -1 ise, oyuncunun barâ€™daki taÅŸÄ±nÄ± zar deÄŸerine gÃ¶re uygun giriÅŸ noktasÄ±na sokulup sokamayacaÄŸÄ± kontrol edilir.
    Rakibin taÅŸÄ± varsa ve tekse kÄ±rÄ±lÄ±r, barâ€™a gÃ¶nderilir.
  - Normal hamle: Oyuncunun tahtadaki taÅŸlarÄ±yla, zar deÄŸeri kadar ileriye hamle yapmasÄ± kontrol edilir. Rakip taÅŸ varsa kÄ±rma veya blokaj kontrolÃ¼ yapÄ±lÄ±r.
  - BearOff (taÅŸ toplama): EÄŸer toPoint == 24 ise, taÅŸ toplanmak isteniyordur. Oyuncunun tÃ¼m taÅŸlarÄ± son bÃ¶lgede mi ve zar uygun mu diye kontrol edilir.

Kurallar:
  - Oyuncunun barâ€™da kÄ±rÄ±k taÅŸÄ± varsa, Ã¶nce onu iÃ§eri sokmasÄ± gerekir (Ã¶ncelikli hamledir).
  - Hedef noktada 1 adet rakip taÅŸÄ± varsa, kÄ±rma iÅŸlemi yapÄ±lÄ±r ve rakip taÅŸ barâ€™a gÃ¶nderilir.
  - Barâ€™a gÃ¶nderilen taÅŸlar ilgili oyuncuya gÃ¶re gÃ¼ncellenir ve bar'daki yÄ±ÄŸÄ±lma (StackIndex) sÄ±rasÄ± yeniden hesaplanÄ±r.

Not:
  - Bu fonksiyon yalnÄ±zca taÅŸlarÄ±n hareketini ve geÃ§erliliÄŸini yÃ¶netir. GÃ¶rsellik veya animasyon iÃ§ermez.
  - Gerekli kurallarÄ±n kontrolÃ¼ iÃ§in `MoveTopStoneAndUpdate`, `IsAnyBarEntryAllowed`, `calculateRemainingDice` gibi yardÄ±mcÄ± fonksiyonlar iÃ§eride Ã§aÄŸrÄ±lÄ±r.*/

// Son Kullanicinin hersey icin kullanacagi Function => Test : TestFullSmilation()
func TryMoveStone(
	stones []*LogicalCoordinate,
	player int,
	fromPoint int,
	toPoint int,
	dice []int,
) (newStones []*LogicalCoordinate, ok bool, usedDice []int, remainingDice []int, brokenStones []*LogicalCoordinate) {

	// 1. Bar'dan giriÅŸ durumu. Kirik tas var mi ?
	if fromPoint == -1 {
		barResult := IsAnyBarEntryAllowed(stones, player, dice) //1-) barResult.RemainingDice kullanilabilecek zarlardan sonra geri kalan kirigi sokamayacagin zarlari ifade eder.
		if !barResult.FromBar || !barResult.Allowed {
			return stones, false, dice, nil, nil
		}

		var usedDie int = -1
		// GiriÅŸ yapÄ±labilecek zar var mÄ±? toPoint'i kontrol etmiyoruz, zarla gelen yere giriyoruz
		for _, die := range barResult.EnterableDice {
			entryPoint := GetEntryPoint(player, die)
			if entryPoint == toPoint && canMoveToPoint(stones, player, toPoint) {
				usedDie = die
				break
			}
		}

		if usedDie == -1 {
			// toPoint iÃ§in uygun zar yok
			return stones, false, dice, nil, nil
		}

		newStones, moved, brokenStones := MoveTopStoneAndUpdate(stones, player, -1, toPoint)
		if !moved {
			return stones, false, dice, nil, nil
		}

		used := []int{usedDie}
		remainingDice := calculateRemainingDice(dice, used)
		return newStones, true, used, remainingDice, brokenStones
	}

	// 2. Hedef toplama alanÄ± mÄ±?
	isBearOff := func(to int) bool {
		/*if player == 1 {
			return to >= 24
		} else if player == 2 {
			return to < 0
		}
		return false*/
		return to >= 24
	}

	// 3. Oyuncunun fromPoint noktasÄ±nda en Ã¼st taÅŸÄ± var mÄ±?
	if !playerHasTopStoneAt(stones, player, fromPoint) {
		return stones, false, dice, nil, nil
	}

	// 4. Bear-off kontrolÃ¼
	if isBearOff(toPoint) {
		canBearOff, remaining, used := CanBearOffStone(stones, player, fromPoint, dice)
		if !canBearOff {
			return stones, false, dice, nil, nil
		}
		newStones, ok, brokenStones := MoveTopStoneAndUpdate(stones, player, fromPoint, toPoint)
		return newStones, ok, used, remaining, brokenStones
	}

	// 5. Normal taÅŸ hareketi
	moveResult := IsNormalMoveAllowed(stones, player, fromPoint, toPoint, dice)
	if !moveResult.Allowed {
		return stones, false, dice, nil, nil
	}

	newStones, ok, brokenStones = MoveTopStoneAndUpdate(stones, player, fromPoint, toPoint)
	return newStones, ok, moveResult.UsedDice, moveResult.RemainingDice, brokenStones
}

// Player Bazinda toplanan toplam tas(Bear_Off) sayisini verir..
func CountCollectedStones(stones []*LogicalCoordinate, player int) int {
	count := 0
	for _, s := range stones {
		if s.Player == player && s.PointIndex == 24 {
			count++
		}
	}
	return count
}

/*func updateStacksForPlayerBar(stones []*LogicalCoordinate, player int) []*LogicalCoordinate {
	// Bar noktasÄ±: -1
	barIndex := -1

	// Bar'daki sadece ilgili oyuncunun taÅŸlarÄ±nÄ± filtrele
	group := []*LogicalCoordinate{}
	for _, stone := range stones {
		if stone.PointIndex == barIndex && stone.Player == player {
			group = append(group, stone)
		}
	}

	// MoveOrder'a gÃ¶re sÄ±rala (kÃ¼Ã§Ã¼k olan altta)
	sort.Slice(group, func(i, j int) bool {
		return group[i].MoveOrder < group[j].MoveOrder
	})

	// StackIndex ve IsTop deÄŸerlerini gÃ¼ncelle
	for i := range group {
		group[i].StackIndex = i
		group[i].IsTop = (i == len(group)-1)
	}

	return stones
}*/
